import display from 'display';
import keyboard from 'keyboard';
import audio from 'audio';
// import device from 'device';

// I am putting all code in function to optimise, if variables are outside
// functions they are put in global namespace, and it's slower to get
// But if you store too much in one function you can cause stackoverflow
function main() {
  // This is XBM format, you can convert images to this format using:
  // https://www.online-utility.org/image/convert/to/XBM
  // dinoRun: 40x43
  const dinoRunWidth = 40;
  const dinoRunHeight = 43;
  const dinoRunSprite = [
    new Uint8Array([
      0x00, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00,
      0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFC, 0xFF, 0x00, 0x00, 0xF0, 0xFC,
      0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00,
      0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0,
      0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x3F, 0x00,
      0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x0F, 0x00, 0x00,
      0xF0, 0xFF, 0x0F, 0x03, 0x00, 0xFC, 0x0F, 0x00, 0x03, 0x00, 0xFC, 0x0F,
      0x00, 0x03, 0x80, 0xFF, 0x0F, 0x00, 0x03, 0x80, 0xFF, 0x0F, 0x00, 0x0F,
      0xF0, 0xFF, 0xFF, 0x00, 0x0F, 0xF0, 0xFF, 0xFF, 0x00, 0x3F, 0xFC, 0xFF,
      0xCF, 0x00, 0x3F, 0xFC, 0xFF, 0xCF, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
      0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF,
      0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF, 0x03,
      0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x00, 0xC0,
      0xFF, 0xFF, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x3F,
      0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x00,
      0x00, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x00, 0x3C,
      0x30, 0x00, 0x00, 0x00, 0x3C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
      0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
    ]),
    new Uint8Array([
      0x00, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00,
      0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFC, 0xFF, 0x00, 0x00, 0xF0, 0xFC,
      0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00,
      0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0,
      0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x3F, 0x00,
      0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x0F, 0x00, 0x00,
      0xF0, 0xFF, 0x0F, 0x03, 0x00, 0xFC, 0x0F, 0x00, 0x03, 0x00, 0xFC, 0x0F,
      0x00, 0x03, 0x80, 0xFF, 0x0F, 0x00, 0x03, 0x80, 0xFF, 0x0F, 0x00, 0x0F,
      0xF0, 0xFF, 0xFF, 0x00, 0x0F, 0xF0, 0xFF, 0xFF, 0x00, 0x3F, 0xFC, 0xFF,
      0xCF, 0x00, 0x3F, 0xFC, 0xFF, 0xCF, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
      0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF,
      0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF, 0x03,
      0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x00, 0xC0,
      0xFF, 0xFF, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x3F,
      0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xFC, 0x30, 0x00, 0x00,
      0x00, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x3C, 0x30, 0x00, 0x00, 0x00, 0x3C,
      0xF0, 0x00, 0x00, 0x00, 0x0C, 0xF0, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
      0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,
    ]),
  ];

  // dino_duck: 55x26
  const dinoDuckSprite = [
    new Uint8Array([
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE0, 
      0xFF, 0x1F, 0x3F, 0xC0, 0xFF, 0x7F, 0xE0, 0xFF, 0x1F, 0x3F, 0xC0, 0xFF, 
      0x7F, 0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x7F, 0xFF, 
      0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
      0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0xFF, 
      0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC0, 0xFF, 
      0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
      0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
      0x1F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xE1, 0xFF, 0x07, 0x00, 0xFC, 0xFF, 
      0xFF, 0xE1, 0xFF, 0x07, 0x00, 0xF0, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 
      0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7E, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1E, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x78, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 
      0x00, 0x00, 
    ]),
    new Uint8Array([
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE0, 
      0xFF, 0x1F, 0x3F, 0xC0, 0xFF, 0x7F, 0xE0, 0xFF, 0x1F, 0x3F, 0xC0, 0xFF, 
      0x7F, 0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x7F, 0xFF, 
      0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
      0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0xFF, 
      0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC0, 0xFF, 
      0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
      0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
      0x1F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xE1, 0xFF, 0x07, 0x00, 0xFC, 0xFF, 
      0xFF, 0xE1, 0xFF, 0x07, 0x00, 0xF0, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 
      0xF0, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xE1, 0x63, 0x00, 0x00, 
      0x00, 0x00, 0xF8, 0xE1, 0xE3, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0xE0, 
      0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 
      0x00, 0x00,
    ]),
  ];

  // ground: 623x12
  const groundSprite = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00,
    0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
    0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60,
    0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x70,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0C, 0x00, 0x1C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x1E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x60, 0x00, 0x00, 0x00, 0x80,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);

  const bird1Sprite = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
    0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
    0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00,
    0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x03,
    0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  ]);

  const bird2Sprite = new Uint8Array([
    0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0x00, 0x00, 0x00,
    0xC0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0xFF, 0x00, 0x00, 0x00,
    0xF0, 0x3F, 0xFF, 0x03, 0x00, 0x00, 0xF0, 0x3F, 0xFF, 0x03, 0x00, 0x00,
    0xFC, 0x3F, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0x3F, 0xFF, 0x0F, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
    0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00,
    0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x03,
    0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x00,
    0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xF0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);

  const cactusSmallSprite = new Uint8Array([
    0xC0, 0x01, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x23, 0xE0, 0x73,
    0xE0, 0x73, 0xE0, 0x73, 0xE2, 0x73, 0xE7, 0x73, 0xE7, 0x73, 0xE7, 0x73,
    0xE7, 0x73, 0xE7, 0x73, 0xE7, 0x73, 0xE7, 0x7F, 0xE7, 0x3F, 0xE7, 0x1F,
    0xE7, 0x03, 0xFF, 0x03, 0xFE, 0x03, 0xFC, 0x03, 0xE0, 0x03, 0xE0, 0x03,
    0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03,
    0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03,
  ]);

  const cactusBigSprite = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00,
    0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x0E, 0x7F, 0x00, 0x1F, 0x7F, 0x00,
    0x1F, 0x7F, 0x00, 0x1F, 0x7F, 0x00, 0x1F, 0x7F, 0x00, 0x1F, 0x7F, 0x38,
    0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C,
    0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C, 0x1F, 0x7F, 0x7C,
    0x1F, 0x7F, 0x7C, 0xFF, 0x7F, 0x7C, 0xFE, 0x7F, 0x7C, 0xFC, 0x7F, 0x7C,
    0xF8, 0x7F, 0x7C, 0xF0, 0x7F, 0x7C, 0x00, 0x7F, 0x7C, 0x00, 0xFF, 0x3F,
    0x00, 0xFF, 0x1F, 0x00, 0xFF, 0x0F, 0x00, 0xFF, 0x07, 0x00, 0x7F, 0x00,
    0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00,
    0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00,
    0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00,
    0x00, 0x7F, 0x00, 0x00, 0x7F, 0x04, 0xD0, 0x7F, 0x00,
  ]);

  // cloud: 46x13
  const cloudSprite = new Uint8Array([
    0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x73, 0x00, 0x00,
    0x00, 0x00, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x80, 0x07, 0x00, 0x00, 0x00, 0x02, 0x80, 0xFC, 0x00,
    0x00, 0xC0, 0x03, 0x40, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x80, 0x07,
    0xC0, 0x3F, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1C,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x36, 0x02, 0x00, 0x00, 0x00, 0x20,
    0x03, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F,
  ]);

  const obstacles = [
    {
      isAnimated: true,
      spawnsY: [88, 62, 45],
      width: 42,
      height: 36,
      sprites: [bird1Sprite, bird2Sprite],
    },
    {
      isAnimated: false,
      spawnsY: [92],
      width: 15,
      height: 33,
      sprites: [cactusSmallSprite],
    },
    {
      isAnimated: false,
      spawnsY: [78],
      width: 23,
      height: 47,
      sprites: [cactusBigSprite],
    }
  ];

  const black = display.color(0, 0, 0);
  const white = display.color(255, 255, 255);
  const grey = display.color(100, 100, 100);

  const gravity = 700;

  // Dino properties
  let dinoY = 82; // Initial position
  let dinoVelocity = 0;
  const dinoJumpStrength = -350;
  let dinoIsJumping = false;
  let dinoIsDucking = false;

  // Obstacle properties
  let obstacleX = 300; // Start off-screen
  let obstacle = obstacles[1];
  let obstacleY = obstacle.spawnsY[0];

  // Ground properties
  let groundX = 0; // Track ground position
  let groundSpeed = 4; // Speed of ground movement

  const sprite = display.createSprite();

  let deltaTime = 0;
  let nowTime = now();
  let oldTime = nowTime;
  let startTime = nowTime;

  let playPointSound = 0;

  const dayInterval = 700;
  const dayTransitionRange = 10;
  let baseColorValue = 0;
  let baseColorInverted = Math.abs(baseColorValue - 255);

  const clouds = [
    { x: random(240, 300), y: random(0, 50) },
    { x: random(350, 400), y: random(0, 50) },
  ];

  let foreground = black;
  let background = white;

  let score = 0;

  sprite.fill(background);
  sprite.setTextColor(foreground);
  sprite.setTextSize(2);
  sprite.setTextAlign(2);
  while (true) {
    if (keyboard.getPrevPress()) {
      break; // Exits the game when a prev button is pressed.
    }

    const selPressed = keyboard.getSelPress();
    if (selPressed && !dinoIsJumping && !dinoIsDucking) {
      dinoVelocity = dinoJumpStrength; // Start the jump
      dinoIsJumping = true;
      audio.tone(494, 40, true);
    }

    const nextPressed = keyboard.getNextPress();
    if (nextPressed && !dinoIsJumping) {
      dinoIsDucking = true;
    }

    if (!nextPressed && dinoIsDucking) {
      dinoIsDucking = false;
    }

    nowTime = now();
    deltaTime = (nowTime - oldTime) / 1000;
    oldTime = nowTime;

    score = Math.floor((nowTime - startTime) / 100);

    if (playPointSound === 0 && (score % 100) < 10 && score > 50) {
      playPointSound = 1;
      audio.tone(784, 80, true);
    } else if (playPointSound === 1) {
      audio.tone(784, 220, true);
      playPointSound = 2;
    } else if ((score % 100) > 50 && playPointSound === 2) {
      playPointSound = 0;
    }

    // Apply gravity
    dinoVelocity += gravity * deltaTime;
    dinoY += dinoVelocity * deltaTime;
  
    // Prevent dino from falling below ground
    if (dinoY > 82) {
      dinoY = 82;
      dinoIsJumping = false; // Allow jumping again
      dinoVelocity = 0;
    }

    groundSpeed = 4 + Math.floor(score / 200);

    // Move the ground
    groundX -= groundSpeed;
    if (groundX <= -383) {
      groundX = 0; // Reset position for seamless looping
    }

    // Move the obstacle
    obstacleX -= groundSpeed;
    // Reset obstacle
    if (obstacleX < -obstacle.width) {
      obstacleX = 240 + random(0, 100); // Random respawn
      obstacle = obstacles[random(0, 3)];
      obstacleY = obstacle.spawnsY[random(0, obstacle.spawnsY.length)];
    }

    // Move clouds
    for (let i = 0; i < 2; i++) {
      clouds[i].x -= groundSpeed - 2;
      if (clouds[i].x < -46) {
        clouds[i].x = 240 + random(0, 100); // Random respawn
        clouds[i].y = random(0, 50);
      }
    }
    

    // Day/night cycle
    const modScore = score % (dayInterval * 2);
  
    baseColorValue = 0;
    baseColorInverted = 255;

    if (modScore % dayInterval >= dayInterval - dayTransitionRange) {
      baseColorValue = Math.round(255 * ((modScore % dayInterval - (dayInterval - dayTransitionRange)) / dayTransitionRange));
      baseColorInverted = Math.abs(baseColorValue - 255);
    }
    if (modScore < dayInterval) {
      foreground = display.color(baseColorValue, baseColorValue, baseColorValue);
      background = display.color(baseColorInverted, baseColorInverted, baseColorInverted);
    } else {
      foreground = display.color(baseColorInverted, baseColorInverted, baseColorInverted);
      background = display.color(baseColorValue, baseColorValue, baseColorValue);
    }
  
    // Draw the scene
    sprite.fill(background);

    for (let i = 0; i < 2; i++) {
      sprite.drawXBitmap(
        clouds[i].x,
        clouds[i].y,
        cloudSprite,
        46,
        13,
        grey,
      );
    }

    sprite.drawXBitmap(groundX, 118, groundSprite, 623, 12, foreground);
    sprite.drawXBitmap(
      obstacleX,
      obstacleY,
      obstacle.sprites[obstacle.isAnimated ? Math.floor(nowTime % 500 / 250) : 0],
      obstacle.width,
      obstacle.height,
      foreground,
    );
    if (dinoIsDucking) {
      sprite.drawXBitmap(
        10,
        dinoY + 17,
        dinoDuckSprite[Math.floor(nowTime % 200 / 100)],
        55,
        26,
        foreground,
      );
    } else {
      sprite.drawXBitmap(
        10,
        dinoY,
        dinoRunSprite[Math.floor(nowTime % 200 / 100)],
        dinoRunWidth,
        dinoRunHeight,
        foreground,
      );
    }
    sprite.setTextColor(foreground);
    sprite.drawText(score, 235, 5);
    sprite.pushSprite();

    // Collision detection
    if (
      20 /* dinoLeft */ < obstacleX + obstacle.width &&
      40 /* dinoRight */ > obstacleX &&
      dinoY + dinoRunHeight - 20 /* dinoBottom */ > obstacleY
    ) { // Game over
      if (obstacleY < 78) {
        if (obstacleY < 50) {
          if (!dinoIsJumping) continue;
        } else {
          if (dinoIsDucking) continue;
        }
      }
      audio.tone(60, 100); // 50
      delay(20);
      audio.tone(60, 180); // 90
      display.setTextColor(foreground);
      display.setTextSize(2);
      display.setTextAlign(0);
      display.drawText("GAME OVER", 70, 40);
      delay(500);

      while (!keyboard.getAnyPress()) {
        delay(10);
      }
      obstacleX = 300;
      delay(500);
      startTime = now();
    }
  }
}

main();
